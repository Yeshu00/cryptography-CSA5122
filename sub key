#include <stdio.h>
#include <stdint.h>

#define BLOCK_SIZE 8

void blockCipher(const uint8_t *input, const uint8_t *key, uint8_t *output) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = input[i] ^ key[i];
    }
}

void leftShiftBlock(const uint8_t *input, uint8_t *output) {
    uint8_t carry = 0;
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = (input[i] << 1) | carry;
        carry = (input[i] & 0x80) ? 1 : 0;
    }
}

void generateSubkeys(const uint8_t *key, uint8_t *subkey1, uint8_t *subkey2) {
    uint8_t zeroBlock[BLOCK_SIZE] = {0};
    blockCipher(zeroBlock, key, subkey1);
    leftShiftBlock(subkey1, subkey1);

    if (subkey1[0] & 0x80) {
        subkey1[0] ^= 0x1B;
    }

    leftShiftBlock(subkey1, subkey2);
    if (subkey2[0] & 0x80) {
        subkey2[0] ^= 0x1B;
    }
}

int main() {
    uint8_t key[BLOCK_SIZE] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6};
    uint8_t subkey1[BLOCK_SIZE];
    uint8_t subkey2[BLOCK_SIZE];

    generateSubkeys(key, subkey1, subkey2);

    printf("Key: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02X ", key[i]);
    }
    printf("\n");

    printf("Subkey 1: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02X ", subkey1[i]);
    }
    printf("\n");

    printf("Subkey 2: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02X ", subkey2[i]);
    }
    printf("\n");

    return 0;
}
