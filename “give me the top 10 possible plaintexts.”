#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_PLAINTEXTS 10

// Function to calculate the frequency of each letter in a given string
void calculateFrequency(const char *text, int *frequency) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            frequency[tolower(text[i]) - 'a']++;
        }
    }
}

// Function to decrypt ciphertext using a given shift value
void decrypt(const char *ciphertext, int shift, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = ((ciphertext[i] - base - shift) % ALPHABET_SIZE + ALPHABET_SIZE) % ALPHABET_SIZE + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to perform letter frequency attack on additive cipher
void frequencyAttack(const char *ciphertext, char *plaintexts[MAX_PLAINTEXTS], int top_plaintexts) {
    int frequency[ALPHABET_SIZE] = {0};
    calculateFrequency(ciphertext, frequency);

    // Find the most common letter in English text (E) and its index
    int max_freq = 0, max_index = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (frequency[i] > max_freq) {
            max_freq = frequency[i];
            max_index = i;
        }
    }

    // Guess the shift based on the most common letter's index
    int shift = (max_index + ALPHABET_SIZE - ('e' - 'a')) % ALPHABET_SIZE;

    // Decrypt the ciphertext using the guessed shift
    char plaintext[strlen(ciphertext) + 1];
    decrypt(ciphertext, shift, plaintext);
    
    // Store the decrypted plaintext in the array
    strcpy(plaintexts[0], plaintext);

    // Generate additional possible plaintexts by trying different shifts
    for (int i = 1; i < top_plaintexts; i++) {
        decrypt(ciphertext, ++shift, plaintexts[i]);
    }
}

int main() {
    char ciphertext[] = "Ymj ynvx fs ymfy nx pstbm ijhwdu tk uwtl tk ymfy nx hnumjw jsi tk ymj kwtrrj ymj pjqyji";
    char *plaintexts[MAX_PLAINTEXTS];

    for (int i = 0; i < MAX_PLAINTEXTS; i++) {
        plaintexts[i] = (char *)malloc(sizeof(char) * (strlen(ciphertext) + 1));
    }

    frequencyAttack(ciphertext, plaintexts, MAX_PLAINTEXTS);

    printf("Top %d possible plaintexts:\n", MAX_PLAINTEXTS);
    for (int i = 0; i < MAX_PLAINTEXTS; i++) {
        printf("%s\n", plaintexts[i]);
    }

    // Free allocated memory
    for (int i = 0; i < MAX_PLAINTEXTS; i++) {
        free(plaintexts[i]);
    }

    return 0;
}
