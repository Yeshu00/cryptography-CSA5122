#include <stdio.h>
#include <stdlib.h>
#include <math.h>

long long power(long long base, unsigned long long exp, long long mod) {
    long long result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

long long modInverse(long long a, long long m) {
    long long m0 = m, t, q;
    long long x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

void generateKeys(long long *e, long long *d, long long *n) {
    long long p, q;
    long long phi, publicKey;

    p = 61;
    q = 53;

    *n = p * q;

    phi = (p - 1) * (q - 1);

    publicKey = 17;

    *e = publicKey;

    *d = modInverse(*e, phi);
}

long long encrypt(long long message, long long e, long long n) {
    return power(message, e, n);
}

long long decrypt(long long cipher, long long d, long long n) {
    return power(cipher, d, n);
}

int main() {
    long long e, d, n;
    long long plaintext, ciphertext, decryptedText;

    generateKeys(&e, &d, &n);

    plaintext = 12;

    ciphertext = encrypt(plaintext, e, n);

    decryptedText = decrypt(ciphertext, d, n);

    printf("Original message: %lld\n", plaintext);
    printf("Encrypted message: %lld\n", ciphertext);
    printf("Decrypted message: %lld\n", decryptedText);

    return 0;
}
