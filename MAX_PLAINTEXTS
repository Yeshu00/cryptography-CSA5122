#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_PLAINTEXTS 10


const float english_frequency[ALPHABET_SIZE] = {
    0.0817, 0.0149, 0.0278, 0.0425, 0.1270, 0.0223, 0.0202, 0.0609, 0.0697, 0.0015, 0.0077, 0.0402,
    0.0241, 0.0675, 0.0751, 0.0193, 0.0010, 0.0599, 0.0633, 0.0906, 0.0276, 0.0098, 0.0236, 0.0015,
    0.0197, 0.0007
};


void calculateFrequency(const char *text, float *frequency) {
    int total_letters = 0;
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            frequency[tolower(text[i]) - 'a']++;
            total_letters++;
        }
    }


    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequency[i] /= total_letters;
    }
}

void decrypt(const char *ciphertext, const char *key, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = key[ciphertext[i] - base];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}


float scorePlaintext(const float *plaintext_frequency) {
    float score = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        score += plaintext_frequency[i] * english_frequency[i];
    }
    return score;
}


void frequencyAttack(const char *ciphertext, char *plaintexts[MAX_PLAINTEXTS], int top_plaintexts) 
    float frequency[ALPHABET_SIZE] = {0};
    calculateFrequency(ciphertext, frequency);

    
    char key[ALPHABET_SIZE];
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        float max_freq = 0;
        int max_index = 0;
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            if (frequency[j] > max_freq) {
                max_freq = frequency[j];
                max_index = j;
            }
        }
        key[max_index] = 'a' + i;
        frequency[max_index] = -1; // Mark as processed
    }

    
    decrypt(ciphertext, key, plaintexts[0]);
    float max_score = scorePlaintext(frequency);

    
    for (int i = 1; i < top_plaintexts; i++) {
        
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            int index = rand() % ALPHABET_SIZE;
            char temp = key[j];
            key[j] = key[index];
            key[index] = temp;
        }
        decrypt(ciphertext, key, plaintexts[i]);
        float score = scorePlaintext(frequency);
        if (score > max_score) {
            max_score = score;
        }
    }
}

int main() {
    char ciphertext[] = "Lk qhl uclhy hy l aljdr sfyrs hyyju xyiuh ruqjy tui iilh, ljfwyh, qwmjlxw hj jufq ilxuhu!";
    char *plaintexts[MAX_PLAINTEXTS];

    for (int i = 0; i < MAX_PLAINTEXTS; i++) {
        plaintexts[i] = (char *)malloc(sizeof(char) * (strlen(ciphertext) + 1));
    }

    frequencyAttack(ciphertext, plaintexts, MAX_PLAINTEXTS);

    printf("Top %d possible plaintexts:\n", MAX_PLAINTEXTS);
    for (int i = 0; i < MAX_PLAINTEXTS; i++) {
        printf("%s\n", plaintexts[i]);
    }

    
    for (int i = 0; i < MAX_PLAINTEXTS; i++) {
        free(plaintexts[i]);
    }

    return 0;
}
