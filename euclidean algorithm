#include <stdio.h>

typedef long long int64;

int64 gcd(int64 a, int64 b, int64 *x, int64 *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }

    int64 x1, y1;
    int64 d = gcd(b, a % b, &x1, &y1);

    *x = y1;
    *y = x1 - y1 * (a / b);

    return d;
}

int64 modInverse(int64 a, int64 m) {
    int64 x, y;
    int64 g = gcd(a, m, &x, &y);

    if (g != 1) {
        return -1;
    } else {
        return (x % m + m) % m;
    }
}

int main() {
    int64 e = 31;
    int64 n = 3599;
    int64 p, q;

    for (int64 i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            p = i;
            q = n / i;
            break;
        }
    }

    int64 phi_n = (p - 1) * (q - 1);
    int64 d = modInverse(e, phi_n);

    printf("Public key: (e = %lld, n = %lld)\n", e, n);
    printf("Private key: %lld\n", d);

    return 0;
}
